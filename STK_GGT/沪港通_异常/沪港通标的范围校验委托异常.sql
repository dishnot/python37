declare @ORDER_QTY ot_account,@cuohe float,@date nvarchar(30),@no int,@len INT,@time nvarchar(30)
set @date = CONVERT(nvarchar(30),getdate(),112)
SET @time = replace (CONVERT(nvarchar(30),getdate(),108),':','')
set @ORDER_QTY=0
set @cuohe = '1.12' 
set @no = 1
set @len = 10000

;
WITH CTE_Cuacct AS (SELECT  C.USER_CODE AS CUST_CODE,
				           C.CUACCT_CODE,
				           C.FUND_STATUS,
				           D.STKPBU,
				           C.FUND_AVL,
				           D.TRDACCT,
				           D.STKBD
				  	FROM (SELECT * FROM CUACCT_FUND 
				  	--WHERE FUND_AVL/1000>100 AND CUACCT_CODE  not IN (SELECT CUACCT_CODE  FROM CUACCT_CHANNEL_CFG )
				  	) C
					INNER JOIN (SELECT * FROM STK_TRDACCT 
					--WHERE STKBD ='13'  AND TRDACCT_STATUS = '0' AND  TRDACCT_EXCLS in ('0','1') AND STKPBU <> ' ' 	
					) D 
				    ON C.CUACCT_CODE = D.CUACCT_CODE
					--INNER JOIN (SELECT * FROM CUST_AGREEMENT WHERE EXP_DATE>@date AND CUST_AGMT_TYPE <>' ' AND CUST_AGMT_TYPE='h') E  ON D.CUST_CODE = E.CUST_CODE
					)
,
CTE_Stk_Code AS (SELECT A.STK_CODE,A.STKBD,A.STK_CLS,A.STK_SUB_CLS,A.STK_LEVEL,
		            		case when  B.CURRENT_PRICE <> 0 AND  B.CURRENT_PRICE <> '' then   ROUND(B.CURRENT_PRICE/10000.000,3,1) 
							when (B.CURRENT_PRICE = 0 or B.CURRENT_PRICE = '') AND B.CLOSING_PRICE <>  0   AND B.CLOSING_PRICE  <> '' then  ROUND(B.CLOSING_PRICE/10000.000,3,1)
							ELSE ROUND(A.STK_LWLMT_PRICE/10000.000,3,1)END as PRICE,	-- 委托价格
			                A.STK_LWLMT_PRICE/10000.00 AS STK_LWLMT_PRICE,
					        A.STK_UPLMT_PRICE/10000.00 AS STK_UPLMT_PRICE,
						 	CASE WHEN isnull(@ORDER_QTY,0) = 0 THEN 
							    CASE WHEN STK_LWLMT_QTY>STK_LOT_SIZE THEN STK_LWLMT_QTY  -- 比较最小委托单位和步长取大为委托数量
							    ELSE STK_LOT_SIZE END
							ELSE @ORDER_QTY END AS ORDER_QTY  -- 委托数量
							FROM 
								(SELECT * FROM STK_INFO) A   --证券信息表
								INNER JOIN (SELECT *  FROM HGT_STK_TRD_STATUS) E ON A.STK_CODE=E.STK_CODE
								INNER  JOIN (SELECT * FROM STK_MKTINFO 
								) B 
								ON B.STK_CODE=A.STK_CODE AND B.STKBD=A.STKBD   -- 行情表
                                --WHERE B.CURRENT_PRICE<>'' 
                                )
,
CTE_TJ1 AS 
(                                
SELECT CUST_CODE,CUACCT_CODE,FUND_STATUS,STKPBU,FUND_AVL,TRDACCT,A.STKBD,
STK_CODE,STK_CLS,STK_SUB_CLS,STK_LEVEL,PRICE,ORDER_QTY,STK_LWLMT_PRICE,STK_UPLMT_PRICE
				             FROM  CTE_Cuacct A,CTE_Stk_Code B
				             ) 
,
CTE_TJ2 AS
(SELECT * FROM    (SELECT ROW_NUMBER() OVER (PARTITION BY STK_CLS,STK_SUB_CLS,STKBD,CUACCT_CODE ORDER BY STK_CODE ASC) AS ID,*  FROM    CTE_TJ1) A WHERE ID between @no and @no+@len --同种类证券代码需要数量
)  
,
CTE_Master_130_140 AS
(
SELECT ID, 
STK_LWLMT_PRICE, 
STK_UPLMT_PRICE, 
A.CUST_CODE, 
CUACCT_CODE, 
A.STKBD, STKPBU, 
TRDACCT, 
130 STK_BIZ, 
'140' STK_BIZ_ACTION, 
STK_CODE, 
A.STK_CLS, 
ORDER_QTY, 
STK_SUB_CLS, 
'0' SECURITY_LEVEL,
(A.PRICE+ ROUND(B.STK_SPREAD/10000.000,3,1)) AS ORDER_PRICE 
FROM CTE_TJ2  A,  STK_PRICE_UNIT B   
--WHERE B.STK_CLS = 'A' AND  A.STKBD = B.STKBD AND A.PRICE BETWEEN B.BGN_PRICE/10000 AND B.END_PRICE/10000   --价格+价差逻辑处理                           
)
,
CTE_Master_131_140 AS
(
SELECT ID, 
STK_LWLMT_PRICE, 
STK_UPLMT_PRICE, 
A.CUST_CODE, 
CUACCT_CODE, 
A.STKBD, STKPBU, 
TRDACCT, 
131 STK_BIZ, 
'140' STK_BIZ_ACTION, 
STK_CODE, 
A.STK_CLS, 
ORDER_QTY, 
STK_SUB_CLS, 
'0' SECURITY_LEVEL,
(A.PRICE+ ROUND(B.STK_SPREAD/10000.000,3,1)) AS ORDER_PRICE 
FROM CTE_TJ2  A,  STK_PRICE_UNIT B   
--WHERE B.STK_CLS = 'A' AND  A.STKBD = B.STKBD AND A.PRICE BETWEEN B.BGN_PRICE/10000 AND B.END_PRICE/10000   --价格+价差逻辑处理                           
)

--深港通标的范围委托校验

SELECT top 1 '港股通买入标的范围外的深港通股票失败' AS name,'信息不存在' AS result,* FROM CTE_Master_130_140  
where STK_CODE NOT IN (SELECT STK_CODE FROM HGT_STK_TRD_STATUS WHERE  STKBD='13' AND OBJECT_FLAG=1)  AND CUACCT_CODE NOT IN ('11')